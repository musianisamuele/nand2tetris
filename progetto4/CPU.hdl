// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//ALU(x, y, zx, nx, zy, ny, f, no, out, zr, ng);
	//Aregister(in, load, out);
	//Dregister(in, load, out);
	//PC(in,load, inc, reset, out);

	//Decodifica dell'istruzione
	/*
		if (instruction -> A) {
			1) Contiene un valore (costante) [Va come primo valore nella ALU]
			2) È un indirizzo di memoria (che poi l'istruzione C userà) [addressM]
			3) Specifica l'arrivo di un salto (che poi l'istruzione C userà) [Devo mandarlo nel PC come in]
		} else (instruction -> C) {
			comp: È la parte in cui vine codificata l'istruzione per l'ALU 
			dest: Codifica dove salvare il risultato (A, D, M)
			jump: Specifica a che condizione eseguire un salto
			
			C: 111a c1c2c3c4 c5c6d1d2 d3j1j2j3
			
			a: seleziona input tra A e M (Mux)
			c1-c6: sono equivalenti a zx, nx, zy, ny, f, no nell'ALU
			d1: memorizza in A
			d2: memorizza in D
			d3: memorizza in M
			j1: out < 0 (ng = 1)
			j2: out = 0 (zr = 1) 
			j3: out > 0 (ng = 0 && zr == 0)
		}
	*/

	//Decodifica istruzione C:
	And(a = instruction[15], b = instruction[12], out = pinA);
	And(a = instruction[15], b = instruction[11], out = pinC1);
	And(a = instruction[15], b = instruction[10], out = pinC2);
	And(a = instruction[15], b = instruction[9], out = pinC3);
	And(a = instruction[15], b = instruction[8], out = pinC4);
	And(a = instruction[15], b = instruction[7], out = pinC5);
	And(a = instruction[15], b = instruction[6], out = pinC6);
	And(a = instruction[15], b = instruction[5], out = pinD1);
	And(a = instruction[15], b = instruction[4], out = pinD2);
	And(a = instruction[15], b = instruction[3], out = pinD3);
	And(a = instruction[15], b = instruction[2], out = pinJ1);
	And(a = instruction[15], b = instruction[1], out = pinJ2);
	And(a = instruction[15], b = instruction[0], out = pinJ3);


	//Registri
	ARegister(in = MorALU, load = writeA, out = regA);
	DRegister(in = aluOut, load = pinD2, out = regD);

	//Collegamenti
	Or(a = pinA, b = instA, out = muxAorM); //se devo usare A come input dell'ALU oppure mi arriva un'istruzone A
	Mux16(a = regA, b = inM, sel = muxAorM, out = AorM); //Mux che seleziona tra A e M come input all'ALU
	Mux16(a = instruction, b = aluOut, sel = pinD1, out = MorALU); //Mux che seleziona tra l'out dell'ALU e M per memorizzare in registro A

	Or16(a = aluOut, b = false, out = outM);	//Or per collegare l'output dell'ALU a outM (mi serve per poter utilizzare l'output)
	Or16(a = regA, b = false, out[0..14] = addressM);	//Address di output (l'indirizzo è sempre contenuto nell registro A)

	Or(a = pinD3, b = false, out = writeM);	//Decido se scrivere sulla memoria
	Not(in = instruction[15], out = instA);
	Or(a = pinD1, b = instA, out = writeA); //Decido se scrivere su A: 1) nel caso una istruzione C me lo dice o nel caso arrivi un'istruzione A;

	And(a = pinJ1, b = ng, out = jump0); //Decido se saltare con out < 0;
	And(a = pinJ2, b = zr, out = jump1); //Decido se saltare con out == 0
	Or(a = ng, b = zr, out = outPositive);	//Le 2 righe seguenti sono un modo per dire !(ng+zr) = !ng * !zr
	Not(in = outPositive, out = notOutPositive);
	And(a = pinJ3, b = notOutPositive, out = jump2); //Decido se saltare con out > 0

	Or8Way(in[0] = jump0, in[1] = jump1, in[2] = jump2, in[3..7] = false, out = thereIsJump);

	//ALU
	ALU(x = regD, y = AorM, zx = pinC1, nx = pinC2, zy = pinC3, ny = pinC4, f = pinC5, no = pinC6, out = aluOut, zr = zr, ng = ng);

	//PC
	PC(in = regA, load = thereIsJump, inc = true, reset = reset, out[0..14] = pc); //COme metto inc?? FARE condizioni per thereIsJump
}
