COMANDI:
	Aritmetic:
		add
		sub
		neg
		eq
		gt
		lt
		and
		or
		not
	
	Memory access:
		pop x
		push y

	Program flow:
		label (declaration)
		goto (label)
		if-goto (label)
	
	Function:
		function (declaration)
		call (a function)
		return

SEGMENTI:
	argument 	-> argometi di una funzione (per ogni singola funzione)
	local 		-> variabili locali (per ogni singola funzione)

	static 		-> variabili globali (condivisio da tutte le funzioni)

	constant 	-> non esiste, serve solo per fare l'input di costanti


MEMORIA:
	[0]: SP 	-> stack pointer
	[1]: LCL 	-> local segment pointer
	[2]: ARG 	-> argument segment pointer
	[3]: THIS -> ?
	[4]: THAT -> ?
	[5-12]: TEMP -> ?
	[13-15]: General porpuse -> Posso farci quello che voglio
	[16-255]: Statics
	[256-2047]: stack + argument e local	
	[2048+]: Heap -> ?


TRADUZIONE VM:
															ASM / VM
	Aritmetic:
		add =											@SP				//@0
															M=M-1			//A = M[0] - 1
															A=M
															D=M				//D = M[M[0] - 1]
															A=A-1			//A = A - 1 = M[0] - 2
															M=D+M;		//M = D + M[M[0] - 2];
		
		sub =											@SP				//@0
															M=M-1			//A = M[0] - 1
															A=M
															D=M				//D = M[M[0] - 1]
															A=A-1			//A = A - 1 = M[0] - 2			
															M=M-D;		//M = -D + M[M[0] - 2];
		
		neg	=											@SP
															A=M-1
															M=-M

		eq =											Faccio la sottrazione tra i due valori nello stack
															e poi se è uguale a zero facci un jmp ad un'istruzione che mi
															mette -1 (true) nello stack. Se no faccio un jmp ad un'istruzione che
															mi mette 0 (false) nello stack. È un po' lunga però... :(
															
															@SP
															M=M-1
															A=M
															D=M
															A=A-1
															D=M-D
															@TRUE_N							//Devo indicizzare bene in base al programma
															D;JEQ

															@SP
															A=M-1;
															M=0;
															@END_N
															0;JMP
															
															(TRUE_N)
															@SP
															A=M-1
															M=-1;
															@END_N
															0;JMP

															(END_N)

		gt = 											@SP
															M=M-1
															A=M
															D=M
															A=A-1
															D=M-D
															@TRUE_N							//Devo indicizzare bene in base al programma
															D;JGT

															@SP
															A=M-1;
															M=0;
															@END_N
															0;JMP
															
															(TRUE_N)
															@SP
															A=M-1
															M=-1;
															@END_N
															0;JMP

															(END_N)

		lt =  										@SP
															M=M-1
															A=M
															D=M
															A=A-1
															D=M-D
															@TRUE_N							//Devo indicizzare bene in base al programma
															D;JGT

															@SP
															A=M-1;
															M=0;
															@END_N
															0;JLT
															
															(TRUE_N)
															@SP
															A=M-1
															M=-1;
															@END_N
															0;JMP

															(END_N)


		and =											@SP				//@0
															M=M-1			//A = M[0] - 1
															A=M
															D=M				//D = M[M[0] - 1]
															A=A-1			//A = A - 1 = M[0] - 2
															M=D&M;		//M = D + M[M[0] - 2];
		
		or =											@SP				//@0
															M=M-1			//A = M[0] - 1
															A=M
															D=M				//D = M[M[0] - 1]
															A=A-1			//A = A - 1 = M[0] - 2
															M=D|M;		//M = D + M[M[0] - 2];

		not	=											@SP
															A=M-1
															M=!M

	Memory access:
		pop segment x =						@x				//offset da calcolare
															D=A
															@segment 	//Qui devo prendere il puntatore in base al segmento
															D=D+M			//Ora D punta all'elemento a cui devo assegnare il valore
															@R13
															M=D				//Salvo l'indirizzo
															@SP
															M=M-1
															A=M
															D=M				//Salvo il valore in D
															@R13 			//Registro in cui ho salvato l'indirzzo di pop
															A=M				//Punto all'indirizzo di pop
															M=D				//Salvo il valore che avevo memorizzato in D

		push segment y =					@y
															D=A
															@segment 	//Per constant è DIVERSO
															A=D+M
															D=M
															@SP
															M=M+1
															A=M-1
															M=D
															

	Program flow:
		label PIPPO =							(PIPPO)
		
		goto PIPPO =							@PIPPO
															0;JMP
		
		if-goto PIPPO =						@SP
															M=M-1
															A=M
															D=M
															@PIPPO
															D;JNE
	
	Function:
		function (declaration) =	(f)
															n times: push constat 0	 (inzializzo gli argomenti a 0)

		call (a function) =				push return-address
															push LCL
															push ARG
															push THIS
															push THAT
															ARG = SP - n - 5 (n : number of args)
															LCL = SP
															goto f
															(return-address)

		return =									FRAME = LCL				(FRAME è temporanea)
															RET = *(FRAME - 5)
															*ARG = pop()
															SP = ARG + 1
															THAT *(FRAME - 1)
															THIS *(FRAME - 2)
															ARG *(FRAME - 3)
															LCL *(FRAME - 4)
															goto RET


NOTE GENERICHE:

	0 -> FALSE
	-1 -> TRUE

	Per passare parametri alle funzioni devo pusharli nello stack
	Il valore di ritorno di una funzione spunterà nello stack al posto di quelli passati

	Quando la funzione f() chiama g():
		1) Devo salvare il return address, cioè l'indirizzo in ROM a cui ritornare (quello dopo la call)
		2) Salvare i puntatori local e argument di f
		3) Inizializzare i puntatori local e argument di g
		4) Passare il controllo all'implementazione di g
	
	Quando la funzione g() inzia ad eseguire:
		1) L'implementazione della VM deve inizializzare tutte le variabili in local a 0
	
	Quando g() termina e devo ritornare ad f():
		1) Devo eliminare i segmenti local e argument lasciandi sullo stack solamente il valore di ritorno
		2) Ripristinare i segmenti local e argument di f
		3) Restituire il controllo ad f saltando al return address

	TIPICO STACK PER UNA CHIAMATA DI FUNZIONE:
			-------------
			.............
			-------------
ARG->	argument 0
			------------
			argument 1
			------------
			return add.
			------------
			LCL
			------------
			ARG
			------------
			THIS
			------------
			THAT
			------------
LCL->	local 0
			------------
			local 1
			------------
SP->
			------------
			............
			------------
