Questo file contiene varie idee che potrei implemetare per risolvereil progetto7 di nand2tetris

Considerazioni:
	0) Non tutte le funzioni che sono presenti nella libreria dell'OS sono chiamate effettivamente. (Non ne ho la certezza però)

	1) C'è sicuramente un codice "statico" che viene eseguito sempre uguale tutte le volte indipendentemente dall'input dato dal player

	2) I comandi asm che ho inserito come traduzione non sono i più ottimizzati in assoluto

	3) Nonostante alcune parti di codice non siano statiche è probabile che lo stack pointer sia quasi sempre determinato e con lui altri valori. Dovrei
		 effettivamente verificare questa mia tesi, ma se così fosse sarebbe possibile evitare molte istruzioni inutili 

	4) In alcuni programmi ci sono tantissime call alla stassa funzione. Forse con dei jmp posso ottimizzare per evitare di ripetere sempre tutte le istruzioni

	5) Le istruzioni per i return sono SEMPRE UGUALI. Sono 66 return per 44 righe di codice. Posso togliere circa 2900 righe.


Idee:
	0) Invece che tradurre tutto a "cervello spento" faccio una considerazione: traduco solo quello che viene effettivamente chiamato.
		 Parto dalla funzione primaria (Sys.vm ?) e poi eseguo Main.vm e da lì in poi inserisco e traduco soltanto le funzioni che vengono effettivamente richieste.
		 Per fare questo devo avere tutti i file inizialmente, poi tengo una queue delle funzioni da tradurre. Inserisco nella queue Sys.vm (?) e Main.vm e inizio a tradurle.
		 Appena incontro una "call" controllo che la funzione chiamata non sia già presente nella queue, e se non lo è la aggiungo. Finisco la traduzione quando la queue è vuota.

	1) Tutta l'inzializzazione del sistema (prima quindi che effettivamente parta il gioco) sicuramente è statica, cioè non prende input dall'esterno e quindi esegue sempre lo stesso codice.
		 Eseguendo sempre lo stesso codice è molto probabile che tutte le push e le pop si possano evitare sapendo a priori i valori da pushare e poppare. Il codice statico finisce quando
		 si incontra la prima istruzione che controlla l'input da tastiera.
		 Non so ancora bene come approcciare la cosa:
		 		0) Potrei crearmi un mio simulatore e vedere quali sono i valori sempre uguali e poi riscrivere un codice asm dedicato solo per quelli
				1) Oppure potrei tenere traccia dei valore al momento della traduzione vm -> asm e inserirli direttamente (tanto un istruzione di push si può rimpiazzare con 4 istruzioni
					 asm conoscendo a priori il valore e l'indirizzo di destinazione: @val;D=A;@indirizzo;M=D). Teoricamente anche gli if-goto sono molto più facili da scrivere e ogni operazine
					 può essere pre-calcolata. Non credo però che nell'inizilizzazione di sistema ci siano if e calcoli da fare

	2) Non credo che l'ottimizzazione del codice asm scritto da me porti una riduzione sostanziale del codice in output. Nonostante ciò è sicuramente qualcosa da poter fare, sopratutto
		 perché la condizione di if-goto ha due istruzioni inutili alla fine e quindi è possibile che ache altre istruzioni siano inutili.

	3) Per verificare il punto 3 l'unica cosa possibile sarebbe giocare più volte a pong e tenere traccia tutte le volte dei valori in ram e dopo aver raccolto abbastanza partitre fare un
		 confronto tra di loro per vedere quali valori sono sempre gli stessi. Fatto questo potrei fare un backtracking per cercare di capire quali istruzioni causano quei valori e sostituirle.
		 La cosa effettivamente potrebbe salvare istruzioni ma, se fatta a manom, richiederebbe un tempo considerevole. Un programma per automatizzare la cosa per il momento però non mi viene in mente. 

	4) Buona parte del comando call è sempre la stessa. Mi basta quindi estrapolare quella parte e renderla globale per poi poter chiamarle tutte le volte e risparmiare codice.

	5) Rendo le istruzioni di ritorno "globali" come se effettivamente fossero una funzione e le chiamo in qualche modo unico tipo RETURN_RUTINE.
		 In questo modo ogni volta che in una funzione raggiungo il return mi basta fare: (RETURN_RUTINE) e 0;JMP 




--------------------------------------------------	OTTIMIZZAZIONE CALL	 --------------------------------------------------	

	Codice vecchio:
		call (f) =								push return-address
															push LCL
															push ARG
															push THIS
															push THAT
															ARG = SP - n - 5 (n : number of args)
															LCL = SP
															goto f
															(return-address)

															ASSEMBLY:
															@5			//Devo fare la push di 5 valori (lo so a priori)
															D=A			
															@SP
															M=M+D		//Aumento lo stack pointer di 5 (tanto lo so a priori)
															D=M-1		//Vado al contrario per salvare i valori (è più comodo).
															@R14		//Indirizzo di supporto in cui salvo gli indirizzi in cui scrivere
															M=D
															
															@THAT		//Prendo il valore di that
															D=M
															@R14
															A=M
															M=D			//Inserisco THAT nello stack
															
															@THIS
															D=M
															@R14
															AM=M-1
															M=D			//Inserisco THIS


															@ARG
															D=M
															@R14
															AM=M-1
															M=D			//Inserisco THIS

															@LCL
															D=M
															@R14
															AM=M-1
															M=D			//Inserisco THIS

															@f_acctual.return		//Inserisco il valore di return
															D=A
															@R14
															AM=M-1
															M=D

															@SP				//LCL = SP
															D=M
															@LCL
															M=D

															@n					//ARG = SP - n - 5. MODIFICARE n IN RUNTIME -> NUMERO ARGOMENTI
															D=A
															@R14
															D=M-D
															@ARG
															M=D

															@f
															0;JMP

															(f_actual.return) //Label di ritorno (f è il nome della funzione)
															ATTENZIONE: SE CHIAMO PIÙ VOLTE LA FUNZIONE I RETURN SONO UGUALI

	
	Codice nuovo:
		call (f) =								@f_acctual.return
															D=A
															@SP
															A=M
															M=D

															@n
															D=A
															@R13
															M=D

															@f
															D=A
															@R14
															M=D

															@ROUTINE_OF_CALL
															0;JMP

															(f_acctual.return)


															(ROUTINE_OF_CALL)

															@LCL
															D=M
															@SP
															AM=M+1
															M=D

															@ARG
															D=M
															@SP
															AM=M+1
															M=D
															
															@THIS
															D=M
															@SP
															AM=M+1
															M=D

															@THAT
															D=M
															@SP
															AM=M+1
															M=D

															@SP
															MD=M+1
															@LCL
															M=D

															@5
															D=A
															@R13			//Dove ho salvato il numero di argomenti
															D=D+M
															@SP
															D=M-D
															@ARG
															M=D

															@R14
															A=M
															0;JMP


-------------------------------------------------RISCRITTURA RETURN ---------------------------------------------------
Il problema con la return attuale è che se una funzione non ha argomenti, quando va a scrivere il valore
con cui ritorna la fuzione in cima allo stack, questo sovrascrive l'indirizzo a cui devo tornare. Devo quindi
implementare una return differente in modo da poter gestire anche funzioni che non hanno argomenti, variabili locali o in generale valori di ritorno (?).


	return =										@5
															D=A
															@LCL
															A=M-D		//punto al return address 
															D=M
															@R13		// Lo salvo il R13
															M=D
														
															@SP
															D=M
															@LCL
															D=M-D
															@NO_RETURN_VALUE //Se SP e LCL coincidono vuol dire che non devo ritornare nulla
															D;JEQ
															
															//Se invece ho un valore da ritornare
															@SP
															A=M-1
															D=M
															@ARG
															A=M
															M=D					//Salvo il valore di ritorno in cima allo stack della funzione prec.

															@ARG
															D=M+1
															@SP
															M=D

															@RESUME_RETURN
															0;JMP


															(NO_RETURN_VALUE)
															@ARG
															D=M
															@SP
															M=D
															
															(RESUME_RETURN)
															@LCL
															AM=M-1
															D=M
															@THAT
															M=D

															@LCL
															AM=M-1
															D=M
															@THIS
															M=D

															@LCL
															AM=M-1
															D=M
															@ARG
															M=D

															@LCL
															A=M-1
															D=M
															@LCL
															M=D


															@R13
															A=M
															0;JMP


-------------------------------------------------- RISCRITTURA eq, gt, lt -------------------------------------------------- 

		eq -> 0
		gt -> 1
		lt -> 2

		eq		=										@eq0
															D=A
															@R13
															M=D
															@ROUTINE_OF_EQ
															0;JMP
															(eq0)

															(ROUTINE_OF_EQ)
															@SP
															AM=M-1
															D=M
															A=A-1
															D=M-D
															@ROUTINE_OF_EQ:TRUE
															D;JEQ
															@SP
															A=M-1
															M=0
															@R13
															A=M
															0;JMP

															(ROUTINE_OF_EQ:TRUE)
															@SP
															A=M-1
															M=-1
															@R13
															A=M
															0;JMP

		gt		=										@gt0
															D=A
															@R13
															M=D
															@ROUTINE_OF_GT
															0;JMP
															(gt0)

															(ROUTINE_OF_GT)
															@SP
															AM=M-1
															D=M
															A=A-1
															D=M-D
															@ROUTINE_OF_GT:TRUE
															D;JGT
															@SP
															A=M-1
															M=0
															@R13
															A=M
															0;JMP

															(ROUTINE_OF_GT:TRUE)
															@SP
															A=M-1
															M=-1
															@R13
															A=M
															0;JMP

		lt		=										@lt0
															D=A
															@R13
															M=D
															@ROUTINE_OF_LT
															0;JMP
															(lt0)

															(ROUTINE_OF_LT)
															@SP
															AM=M-1
															D=M
															A=A-1
															D=M-D
															@ROUTINE_OF_LT:TRUE
															D;JLT
															@SP
															A=M-1
															M=0
															@R13
															A=M
															0;JMP

															(ROUTINE_OF_LT:TRUE)
															@SP
															A=M-1
															M=-1
															@R13
															A=M
															0;JMP
